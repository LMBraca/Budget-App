import React, { useState } from "react";
import { Debt } from "../../models/debt";
import { insertDebt } from "../../services/debtService";
import "../../css/NewExpense.css"; // Using the same CSS for consistency

const NewDebt: React.FC = () => {
  const [showForm, setShowForm] = useState(false);
  const [description, setDescription] = useState("");
  const [debtAmount, setDebtAmount] = useState("");
  const [name, setName] = useState("");
  const [dateTime, setDateTime] = useState("");
  const [error, setError] = useState<string | null>(null);
  const [loading, setLoading] = useState(false);

  const toggleForm = () => {
    setShowForm(!showForm);
  };

  const handleFormSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setError(null);

    const userId = localStorage.getItem("userId");

    if (!userId) {
      setError("No user ID found. Please sign in first.");
      setLoading(false);
      return;
    }

    if (!description || !debtAmount || !dateTime) {
      setError("Description, debt amount, and date are mandatory fields.");
      setLoading(false);
      return;
    }

    const combinedDateTime = new Date(dateTime);

    const newDebt: Debt = {
      idDebt: 0, // This will be auto-generated by Supabase
      description,
      debt: parseFloat(debtAmount),
      name: name || "No name available",
      date: combinedDateTime,
      idUser: parseInt(userId), // Ensure the user ID is passed correctly
      paid: false, // Default to unpaid
    };

    try {
      const result = await insertDebt(newDebt);

      if (result.success) {
        toggleForm(); // Close form after successful submission
        setDescription("");
        setDebtAmount("");
        setName("");
        setDateTime("");
        window.location.reload(); // Refresh to fetch new data
      } else {
        setError("An error occurred. Please try again.");
      }
    } catch (error) {
      setError("An unexpected error occurred. Please try again.");
    }

    setLoading(false);
  };

  return (
    <>
      {/* Floating widget button for adding a debt */}
      <div className="floating-debt" onClick={toggleForm}>
        <p style={{ color: "white" }}>+ Add Owed Debt</p>
      </div>

      {/* Debt form */}
      {showForm && (
        <div className="overlay">
          <div className="expense-form">
            {" "}
            {/* Reusing the same CSS class for form layout */}
            <form onSubmit={handleFormSubmit}>
              <h3>Add Debt</h3>
              <div className="form-group">
                <label htmlFor="description">Description:</label>
                <input
                  type="text"
                  id="description"
                  value={description}
                  onChange={(e) => setDescription(e.target.value)}
                  required
                />
              </div>
              <div className="form-group">
                <label htmlFor="debtAmount">Debt Amount:</label>
                <input
                  type="number"
                  id="debtAmount"
                  value={debtAmount}
                  onChange={(e) => setDebtAmount(e.target.value)}
                  required
                />
              </div>
              <div className="form-group">
                <label htmlFor="name">Borrower:</label>
                <input
                  type="text"
                  id="name"
                  value={name}
                  onChange={(e) => setName(e.target.value)}
                />
              </div>
              <div className="form-group">
                <label htmlFor="dateTime">Date and Time:</label>
                <input
                  type="datetime-local"
                  id="dateTime"
                  value={dateTime}
                  onChange={(e) => setDateTime(e.target.value)}
                  required
                />
              </div>
              {error && <p className="error">{error}</p>}
              <div className="button-container">
                <button type="submit" disabled={loading}>
                  {loading ? "Submitting..." : "Submit"}
                </button>
                <button
                  type="button"
                  className="button cancel"
                  onClick={toggleForm}
                >
                  Cancel
                </button>
              </div>
            </form>
          </div>
        </div>
      )}
    </>
  );
};

export default NewDebt;
